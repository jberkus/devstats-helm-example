{{- $skipPostgres := .Values.skipPostgres -}}
{{ if not $skipPostgres }}
{{- /*
Actual Postgres nodes, running patroni
*/ -}}
---
apiVersion: v1
kind: StatefulSet
metadata:
  name: '{{ .Values.postgresSvcName }}'
  labels:
    type: postgres
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    cluster-name: '{{ .Values.postgresSvcName }}'
spec:
  replicas: '{{ .Values.postgresNodes }}'
  serviceName: '{{ .Values.postgresSvcName }}'
  template:
    metadata:
      labels:
        type: postgres
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        cluster-name: '{{ .Values.postgresSvcName }}'
    spec:
      serviceAccountName: '{{ .Values.postgresSvcName }}'
      containers:
      - name: '{{ .Values.postgresSvcName }}'
        image: '{{ .Values.postgresImageName }}'
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /home/postgres/pgdata
          name: pgdata
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_LABELS
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels
        - name: PATRONI_SUPERUSER_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pgSecret }}
              key: PG_ADMIN_USER.secret
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pgSecret }}
              key: PG_PASS.secret
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pgSecret }}
              key: PG_PASS_REP.secret
        - name: PATRONI_SCOPE
          value: '{{ .Values.postgresSvcName }}'
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'false'
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: /home/postgres/pgdata/pgroot/data
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
      terminationGracePeriodSeconds: 0
  volumeClaimTemplates:
  - metadata:
      annotations:
       volume.alpha.kubernetes.io/storage-class: anything
      name: pgdata
    spec:
     accessModes:
     - ReadWriteOnce
     resources:
       requests:
         storage: '{{ .Values.postgresStorageSize }}'

{{ end }}
